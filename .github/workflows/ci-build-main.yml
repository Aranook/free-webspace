## Project
# GitHub Actions workflow
# Auteur : ACOMDIR
# Url contact: https://www.facebook.com/acomdir/
# Please come vote my page Facebook to support me in the development of this open source project.

name: ci-build-main

on:
  push:
    branches:
      - "main"
  pull_request:
    branches:
      - "main"
  workflow_dispatch:

jobs:
  build_and_deploy:
    runs-on: ubuntu-latest

    steps:
      # 1. Vérifier le code source
      - name: Checkout code
        uses: actions/checkout@v4

      # 2. Configurer Python
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.13.1'  # Version Python valide

      # 3. Installer les dépendances Python
      - name: Install Python dependencies
        run: |
          python -m pip install --upgrade pip  # Mettre à jour pip
          pip install -r backend/requirements.txt  # Installer les dépendances Python spécifiées dans le fichier requirements.txt

      # 4. Installer les dépendances frontend (React et Vue)
      - name: Install frontend dependencies
        working-directory: frontend
        run: |
          npm install react react-dom  # Installer React et React DOM
          npm install vue  # Installer Vue
          npm install react-router-dom  # Installer react-router-dom
          npm install vue-router  # Installer vue-router
          npm install axios  # Installer axios
          npm install bootstrap  # Installer Bootstrap
          npm install react-scripts # React-scripts

      # 5. Configurer les variables d'environnement (si nécessaire)
      - name: Set environment variables
        run: echo "FLASK_APP=backend/app.py" >> $GITHUB_ENV  # Configurer Flask app

      # 6. Configurer la clé API NewsAPI dans les secrets
      - name: Set NewsAPI key
        run: echo "NEWSAPI_KEY=${{ secrets.NEWSAPI_KEY }}" >> $GITHUB_ENV

      # 7. Récupérer les actualités via NewsAPI
      - name: Fetch AI news from NewsAPI
        run: |
          python backend/news_fetcher.py  # Exécuter le script Python dans le répertoire backend

      # 8. Exécuter les tests pour Flask (si vous avez des tests pour Flask)
      - name: Run Flask tests
        run: |
          pytest backend/tests  # Exécuter les tests Flask si vous avez un dossier de tests

      # 9. Construire l'application Flask (si nécessaire pour des étapes supplémentaires avant le déploiement)
      - name: Build Flask app
        run: |
          # Vide pour le moment

      # 10. Construire le frontend (React ou Vue)
      - name: Build frontend
        working-directory: frontend
        run: |
          npm run build  # Construire l'application frontend (cela génère un dossier 'build')
          
      # 11. Créer manuellement le dossier 'build' si il n'existe pas
      - name: Create build directory and move assets
        run: |
          # Si le dossier build n'existe pas, on le crée
          if [ ! -d "frontend/build" ]; then
            echo "Build directory does not exist. Creating it now."
            mkdir -p frontend/build  # Crée le dossier build
          fi
          
          # Ajout des fichiers nécessaires dans le dossier build
          echo "Creating index.html and necessary assets inside 'build' directory."
          echo '<html><head><title>Mon Projet</title></head><body><h1>Mise en place</h1></body></html>' > frontend/build/index.html
          # Si vous avez d'autres fichiers nécessaires à ajouter dans build, vous pouvez les copier ici.
          
       # 13. Vérifier si le dossier build existe
      - name: Check if build directory exists
        run: |
          if [ ! -d "frontend/build" ]; then
            echo "Build directory does not exist. Exiting."
            exit 1
          fi

      # 14. Déployer l'application sur GitHub Pages
      - name: Deploy to GitHub Pages
        uses: peaceiris/actions-gh-pages@v3
        with:
          personal_token: ${{ secrets.GITHUB_TOKEN }}  # Utilise le token secret pour autoriser l'accès
          publish_dir: ./frontend/build  # Dossier où le frontend est généré après le build
          publish_branch: gh-pages  # Spécifie la branche où déployer (par défaut, c'est `gh-pages`)
          enable_jekyll: false  # Désactiver Jekyll par défaut
          disable_nojekyll: true  # Désactiver la gestion de Jekyll pour éviter des problèmes avec des fichiers
